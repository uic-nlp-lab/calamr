## description: command line configuration

[calamr_default]
results_dir = ~/Desktop/amr-graph
amr_rel_dir = ${default:root_dir}/corpus/amr-rel

[cli]
# the list of applications to invoke on start up
apps = list: ${cli_config_default:apps}, cleaner_cli, show_config_cli,
  aapp, sapp, sdapp, capp
# declare sections to remove
cleanups = list: ${cli_config_default:cleanups}, cleaner_cli, show_config_cli,
  aapp_decorator, sapp_decorator, sdapp_decorator

[log_cli]
format = %%(levelname)s:%%(module)s:%%(message)s
default_app_level = warn
loggers = dict: {
  'transformers': 'err',
  'zensols.amr.app': 'info',
  'zensols.datdesc': 'info',
  'zensols.calamr.app': 'info',
  'zensols.calamr.score': 'info',
  'zensols.calamr.corpus': 'info',
  'zensols.calamr.result': 'info',
  'zensols.calamr.summary.coref': 'info',
  'zensols.calamr.stash': 'info'}

# remove custom AMR graph plots directory
[cleaner_cli]
class_name = zensols.cli.Cleaner
paths = eval: (
  ('${default:temporary_dir}', '*.log', '**/__pycache__', '${calamr_default:results_dir}'),
  ('${default:data_dir}',),
  ('${calamr_default:amr_rel_dir}',))

# replace dry run option for output_dir -d
[cleaner_cli_decorator]
option_excludes = set: dry_run

[import]
config_files = list:
  resource(zensols.util): resources/default.conf,
  resource(zensols.util): resources/cli.conf,
  resource(zensols.util): resources/cli-config.conf,
  resource(zensols.util): resources/cleaner.conf,
  resource(zensols.amr): resources/default.conf

[config_cli]
# missing configuration files allowed
expect = False

# import the `imp_conf` while leaving default and escape sections available to
# the remainder of the config loading process
[config_import]
references = list:
  default, package, amr_default, calamr_default,
  amr_trainer_default, amr_anon_default, amr_model_default
sections = list: app_imp_conf

# import overrides, resource libraries, and configuration to create features
# from language text (new section from library to avoid `type` parametrer)
[app_imp_conf]
type = import
config_files = list: 
  ^{override},
  ^{config_path},
  resource(zensols.calamr): resources/default.conf,
  resource(zensols.deeplearn): resources/default.conf,
  resource(zensols.deepnlp): resources/default.conf,
  resource(zensols.propbankdb): resources/default.conf,
  resource(zensols.rend): resources/default.conf,
  ^{override},
  ^{config_path},
  resource(zensols.nlp): resources/obj.conf,
  resource(zensols.nlp): resources/component.conf,
  resource(zensols.nlp): resources/mapper.conf,
  resource(zensols.nlp): resources/score.yml,
  resource(zensols.deeplearn): resources/obj.conf,
  resource(zensols.deepnlp): resources/obj.conf,
  resource(zensols.amr): resources/obj.conf,
  resource(zensols.amr): resources/annotate.conf,
  resource(zensols.amr): resources/coref.conf,
  resource(zensols.amr): resources/serial.conf,
  resource(zensols.amr): resources/score.yml,
  resource(zensols.propbankdb): resources/obj.yml,
  resource(zensols.propbankdb): resources/embed.yml,
  resource(zensols.calamr): resources/obj.conf,
  resource(zensols.calamr): resources/score.yml,
  resource(zensols.calamr): resources/result.yml,
  resource(zensols.rend): resources/obj.conf,
  ^{config_path},
  ^{override}

[capp]
class_name = zensols.calamr.CorpusApplication
#doc_parser = instance: ${amr_default:doc_parser}
anon_doc_stash = instance: amr_anon_feature_doc_stash
serialized_factory = instance: amr_serialized_factory
doc_graph_factory = instance: calamr_doc_graph_factory
doc_graph_aligner = instance: calamr_doc_graph_aligner
results_dir = path: ${calamr_default:results_dir}

[capp_decorator]
class_name = zensols.cli.ActionCli
option_excludes = set: config_factory, doc_parser, anon_doc_stash,
  serialized_factory, doc_graph_factory, doc_graph_aligner, results_dir,
  doc_scorer, result_analyzer
option_overrides = dict: {
  'output_file': {'long_name': 'output', 'short_name': 'o'},
  'output_dir': {'long_name': 'dir', 'short_name': 'd',
                  'metavar': 'DIR',
                  'default': '${calamr_default:results_dir}'},
  'report_file': {'long_name': 'agg', 'short_name': None,
                   'default': '${calamr_default:results_dir}'},
  'output_format': {'long_name': 'format', 'short_name': 'f'},
  'render_level': {'long_name': 'rendlevel', 'short_name': 'r'},
  'keys': {'metavar': '<STRING|ALL>'}}
mnemonic_overrides = dict: {
  'write_micro_corpus': 'micro',
  'add_micro_corpus': 'microadd',
  'dump_annotated': 'dump',
  'align_corpus': 'aligncorp',
  'create_mismatch_proxy_corpus': 'miscorp',
  'clear_doc_cache': 'cleardoc'}
mnemonic_excludes = set: get_annotated_summary

[aapp]
class_name = zensols.calamr.AlignmentApplication
serialized_factory = instance: amr_serialized_factory
doc_graph_factory = instance: calamr_doc_graph_factory
doc_graph_aligner = instance: calamr_doc_graph_aligner

[aapp_decorator]
option_excludes = set: config_factory
option_overrides = dict: {
  'output_dir': {'long_name': 'dir', 'short_name': 'd',
                  'metavar': 'DIR',
                  'default': '${calamr_default:results_dir}'},
  'output_format': {'long_name': 'format', 'short_name': 'f'},
  'render_level': {'long_name': 'rendlevel', 'short_name': 'r'}}
mnemonic_overrides = dict: {
  'align_file': 'align'}

[sapp]
class_name = zensols.amr.ScorerApplication
anon_doc_stash = instance: amr_anon_feature_doc_stash

[sapp_decorator]
option_excludes = set: config_factory, anon_doc_stash
option_overrides = dict: {
  'input_gold': {'long_name': 'gold'},
  'input_parsed': {'long_name': 'parsed', 'short_name': None},
  'output_format': {'long_name': 'format', 'short_name': 'f'},
  'output_dir': {'long_name': 'dir', 'short_name': 'd',
                  'metavar': 'DIR',
		  'doc': 'the output directory',
                  'default': '${calamr_default:results_dir}'}}
mnemonic_overrides = dict: {
  'parse_penman': 'penman',
  'remove_wiki': 'rmwiki'}

[sdapp]
class_name = zensols.calamr.app.ScorerApplication
score_cachers = instance: tuple: calamr_doc_scorer, calamr_score_method

[sdapp_decorator]
option_excludes = set: config_factory, score_cachers
option_overrides = dict: {
  'output_file': {'long_name': 'out', 'short_name': 'o'},
  'doc_keys': {'long_name': 'keys', 'short_name': None}}
mnemonic_overrides = dict: {
  'score_anon_docs': 'scoredoc',
  'clear_score_cache': 'clearscore'}
