## Command line configuration

[amr_default]
report_dir = amr-graph

# define what applications to provide for the command line application
[cli]
apps = list: ${cli_config_default:apps}, cleaner_cli, show_config_cli, app, sapp, tapp, papp
cleanups = list: ${cli_config_default:cleanups}, cleaner_cli, tapp, papp

[log_cli]
#format = %%(asctime)s[%%(levelname)s]:%%(name)s %%(message)s
format = %%(levelname)s:%%(module)s:%%(message)s
loggers = dict: {'zensols.amr.score': 'info'}

# remove custom AMR graph plots directory
[cleaner_cli]
class_name = zensols.cli.Cleaner
paths = eval: (
  ('${default:temporary_dir}', '*.log', '**/__pycache__', '${amr_default:report_dir}'),
  ('${default:data_dir}',),
  ('${amr_anon_default:corpus_dir}',))

# configuration files are optional
[config_cli]
expect = False

[import]
config_files = list:
    resource(zensols.util): resources/default.conf,
    resource(zensols.util): resources/cli.conf,
    resource(zensols.util): resources/cli-config.conf,
    resource(zensols.util): resources/cleaner.conf,
    resource(zensols.amr): resources/default.conf

# import the `imp_conf` while leaving default and escape sections available to
# the remainder of the config loading process
[config_import]
references = list:
  default, package, amr_default,
  amr_trainer_default, amr_anon_default, amr_model_default
sections = list: app_imp_conf

# import overrides, resource libraries, and configuration to create features
# from language text (new section from library to avoid `type` parametrer)
[app_imp_conf]
type = import
config_files = list:
    ^{override},
    ^{config_path},
    resource(zensols.nlp): resources/obj.conf,
    resource(zensols.nlp): resources/component.conf,
    resource(zensols.nlp): resources/mapper.conf,
    resource(zensols.nlp): resources/score.yml,
    resource(zensols.amr): resources/obj.conf,
    resource(zensols.amr): resources/annotate.conf,
    resource(zensols.amr): resources/coref.conf,
    resource(zensols.amr): resources/score.yml,
    ^{config_path}

# command line app tie
[app]
class_name = zensols.amr.Application
log_config = instance: log_cli
amr_parser = instance: amr_parser
doc_parser = instance: ${amr_default:doc_parser}
anon_doc_stash = instance: amr_anon_feature_doc_stash
generator = instance: amr_generator
dumper = instance: amr_dumper

[app_decorator]
option_overrides = dict: {
  'input_file': {'long_name': 'input', 'metavar': '<FILE|DIR>'},
  'output_dir': {'long_name': 'output', 'short_name': 'o', 'metavar': 'DIR'},
  'keep_keys': {'long_name': 'keep', 'short_name': 'k'}}
option_excludes = set: config_factory, log_config, amr_parser, doc_parser,
  anon_doc_stash, generator, dumper
mnemonic_overrides = dict: {'write_metadata': 'meta'}

[sapp]
class_name = zensols.amr.ScorerApplication
anon_doc_stash = instance: amr_anon_feature_doc_stash

[sapp_decorator]
option_overrides = dict: {
  'input_gold': {'long_name': 'gold'},
  'input_parsed': {'long_name': 'parsed', 'short_name': None},
  'output_format': {'long_name': 'format', 'short_name': 'f'},
  'output_dir': {'long_name': 'output', 'short_name': 'o', 'metavar': 'DIR'}}
option_excludes = set: config_factory, anon_doc_stash
mnemonic_overrides = dict: {
  'parse_penman': 'parsefile',
  'remove_wiki': 'rmwiki'}

[tapp]
class_name = zensols.amr.TrainerApplication
trainer = instance: amr_trainer
evaluator = instance: amr_evaluator

[tapp_decorator]
mnemonic_overrides = dict: {'write_corpus': 'corpus'}
option_overrides = dict: {
  'corpus_file': {'long_name': 'corpfile', 'short_name': None}}
option_excludes = set: config_factory, trainer, evaluator

[papp]
class_name = zensols.amr.app._ProtoApplication
app = instance: app
sapp = instance: sapp
