# description: annotate AMR graphs (i.e. alignment)

## Base document parser that splits on entities
[amr_base_doc_parser]
class_name = zensols.nlp.SpacyFeatureDocumentParser
token_normalizer = instance: amr_map_filter_token_normalizer


## Annotate
#
# corpus caching stash that uses formatted AMR graphs from a file
[amr_anon_corpus_resource]
class_name = zensols.install.Resource
# corpus file meant to override, but uses the little prince as an example
url = ${amr_trainer_default:isi_down_url}/amr-bank-struct-v3.0.txt
name = None
clean_up = False

[amr_anon_corpus_installer]
class_name = zensols.install.Installer
base_directory = path: ${amr_anon_default:corpus_dir}
resources = instance: list: amr_anon_corpus_resource

[amr_anon_doc_factory_stash]
class_name = zensols.amr.AnnotatedAmrDocumentStash
# the installer containing the AMR annotated corpus
installer = instance: amr_anon_corpus_installer
# the directory containing sentence type mapping for documents or ``None`` if
# there are no sentence types
#doc_dir = path: ${amr_anon_default:corpus_dir}/docs
doc_dir = None
# if provided, AMR metadata is added to sentences, which is needed by the AMR
# populator
doc_parser = instance: amr_base_doc_parser
# a directory to store pickle cache files of the annotated corpus
corpus_cache_dir = path: ${amr_default:data_dir}/anon/corpus
# the ID used in the graph string comments containing the document ID
id_name = id
# the regular expression used to create the :obj:`id_name` if it exists; the
# regular expression must have with two groups: the first the ID and the second
# is the sentence index
id_regexp = eval({'import': ['re']}): re.compile(r'([^.]+)\.(\d+)')
# used to annotated AMR documents if not ``None``
doc_annotator = instance: amr_anon_doc_parser

[amr_anon_doc_backing_stash]
class_name = zensols.persist.DirectoryStash
path = path: ${amr_default:data_dir}/anon/doc

[amr_anon_doc_stash]
class_name = zensols.persist.CacheFactoryStash
delegate = instance: amr_anon_doc_backing_stash
factory = instance: amr_anon_doc_factory_stash

[amr_anon_feature_doc_back_stash]
class_name = zensols.persist.DirectoryStash
path = path: ${amr_default:data_dir}/anon/feature-doc

[amr_anon_feature_doc_stash]
class_name = zensols.amr.AnnotatedAmrFeatureDocumentStash
doc_parser = instance: amr_base_doc_parser
doc_stash = instance: amr_anon_feature_doc_back_stash
amr_stash = instance: amr_anon_doc_stash


## Annotation factory
[anon_doc_factory]
class_name = zensols.calamr.annotate.AnnotatedAmrFeatureDocumentFactory
doc_parser = instance: ${amr_default:doc_parser}


## Feature annotation: add attribute notes from feature sentences
#
[amr_token_ent_populator]
class_name = zensols.amr.TokenFeatureAnnotator
role = :ent
feature_id = ent_

[amr_token_pos_populator]
class_name = zensols.amr.TokenFeatureAnnotator
role = :pos
feature_id = tag_
# named entities can span tokens with varying POS tags
indexed = True

[amr_token_norm_populator]
class_name = zensols.amr.TokenFeatureAnnotator
role = :norm
feature_id = norm

[amr_alignment_populator]
class_name = zensols.amr.AlignmentPopulator

[amr_anon_doc_parser_stash]
class_name = zensols.persist.DirectoryStash
path = path: ${amr_default:data_dir}/parser-feature-doc

# used to parse, populate, and annotate AMR graphs; this has the advantage of
# avoiding a second AMR construction--if you need to add features to nodes
[amr_anon_doc_parser]
class_name = zensols.amr.AnnotationFeatureDocumentParser
delegate = instance: amr_base_doc_parser
stash = instance: amr_anon_doc_parser_stash
amr_parser = instance: amr_parser
#token_feature_annotators = instance: tuple: amr_token_ent_populator, amr_token_pos_populator
token_feature_annotators = eval: ()
alignment_populator = instance: amr_align_populator


## Corpus creation
#
[amr_corpus_writer]
class_name = zensols.amr.CorpusWriter
doc_parser = instance: ${amr_default:doc_parser}
